{% macro compareVariables variables %}
    {% for variable in variables where variable.readAccess != "private" and variable.readAccess != "fileprivate" %}{% if not variable.annotations.skipEquality %}guard {% if not variable.isOptional %}{% if not variable.annotations.arrayEquality %}lhs.{{ variable.name }} == rhs.{{ variable.name }}{% else %}compareArrays(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==){% endif %}{% else %}compareOptionals(lhs: lhs.{{ variable.name }}, rhs: rhs.{{ variable.name }}, compare: ==){% endif %} else { return false }{% endif %}
    {% endfor %}
{% endmacro %}

{% for type in types.types|!enum where type.implements.AutoMerge or type|annotated:"AutoMerge" %}
// MARK: - {{ type.name }} AutoMerge
extension {{ type.name }} {
{{spacing}}    {{ type.accessLevel }} func merge(with rhs: {{ type.name }}?) -> {{ type.name }} {
{{spacing}}        return {{ type.name }}(
{{spacing}}            {% for variable in type.storedVariables %}
{{spacing}}            {{ variable.name }}: {{ variable.name }} ?? rhs?.{{ variable.name }}{% if not forloop.last %},{% endif %}
{{spacing}}            {% endfor %}
{{spacing}}        )
{{spacing}}    }
}
{% endfor %}
