###################################
# Common flags for all builds
###################################
build --verbose_failures # Print the full command line for commands that failed
build --test_output=errors # Prints log file output to the console on failure
# build --sandbox_debug # Only for debugging during development

# Enable incremental compilation (disabled for now, but worth having it around)
# See: https://github.com/bazelbuild/rules_swift/pull/174
# build --strategy=SwiftCompile=worker

test --test_runner_fail_fast

###################################
# iOS flags
###################################
build:ios --apple_platform_type=ios
build:ios --ios_minimum_os={{global.minimumDeploymentTarget}}

###################################
# iOS debug build flavour
###################################
build:ios-debug --config=ios
build:ios-debug --compilation_mode=fastbuild

###################################
# iOS release build flavour
###################################
build:ios-release --config=ios
build:ios-release --compilation_mode=opt
build:ios-release --apple_bitcode=embedded
build:ios-release --copt=-fembed-bitcode
build:ios-release --apple_generate_dsym
# build:ios-release --ios_multi_cpus=armv7,arm64 # Build the app FAT, so it can be run on devices. This requires a provisioning profile

# build:ios-release --linkopt=-s --strip=always # Omit all symbol information from the output file
# build:ios-release --copt=-O2

###################################
# Commented out, but maybe good to have around
###################################
# Specify xcode version
# build:ios --xcode_version=11.3.1

# During development
# build -s --test_output=all --cache_test_results=no

# Force bazel output to use colors (good for jenkins) and print useful errors
# This is disabled as messes up with the errors and warnings shown by xcode:
# they contain color characters, and when clicked do not take you to the offending line
# common --color=yes

# Swift-specific features: https://github.com/bazelbuild/rules_swift/blob/master/swift/internal/features.bzl
# build --features=swift.enable_batch_mode  # Intended to speed up non-incremental non-WMO builds.
# build --features=swift.use_global_module_cache  # Use the same global Clang module as ObjC targets.

###################################
# References
###################################
# * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/ci_build/install/.bazelrc
# * https://github.com/material-components/material-components-ios/blob/develop/.bazelrc
# * https://github.com/lyft/envoy-mobile/blob/master/.bazelrc
