name: "taskfile.yml"
mode: "module"
content: |  
  name: "taskfile"
  mode: "root"
  content: |
    #!/bin/zsh
    ¶
    #####################################################################
    # This file contains several functions that can be run as tasks
    #
    # In order to run them easily, do:
    # > source {{'{{'}}global.fileName}}
    #
    # After sourcing the script you can run each task by its name, for example:
    # > help
    #####################################################################
    ¶
    # Fail if exit code is not zero, in pipes, and also if variable is not set
    # See: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
    set -euo pipefail
    ¶
  {% if module.name == "bazel" %}
    function setup() {
      version="{{'{{'}}custom.bazelVersion}}"
      if [[ $(bazel --version 2>/dev/null) == "bazel $version" ]]; then
        echo "✨ bazel with version '$version' is already installed"
      else
        echo "✨ Downloading and installing bazel '$version'"
        install_path=/usr/local/bin/bazel
        curl -L "https://github.com/bazelbuild/bazel/releases/download/{{'{{'}}custom.bazelVersion}}/bazel-{{'{{'}}custom.bazelVersion}}-darwin-x86_64" --output "$install_path"
        chmod u+x "$install_path"
      fi
    }
    ¶
    function test() {
      bazel test //Libraries/... --test_output=errors
    }
  {% endif %}
  {% if module.name == "xcodegen" or module.name == "cocoapods" %}
    function create_projects() {
      total_count=0
      generated_count=0
    ¶
      for f in $(find . -name 'project.yml' | sort -n); do
        # Only create the project if it is not there already
        directory=$(dirname "$f")
        xcodeproj_files=$(find "$directory" -maxdepth 1 -name "*.xcodeproj")
        if [ -z "$xcodeproj_files" ]; then
          xcodegen --spec "$f"
          ((++generated_count))
        fi
        ((++total_count))
      done
    ¶
      echo "✨ Done"
      echo "✨ Number of 'project.yml' files detected: ${total_count}"
      echo "✨ Number of projects generated: ${generated_count}"
    }
    ¶
  {% endif %}
  {% if module.name == "xcodegen" %}
    function setup() {
      echo "✨ Install project dependencies"
      mint install yonaskolb/XcodeGen@{{'{{'}}custom.xcodeGenVersion}}
    ¶
      echo "✨ Setup project"
      create_projects
    }
    ¶
    function test() {
      xcodebuild test -project All.xcodeproj -scheme All -destination 'platform=iOS Simulator,name=iPhone 8,OS=latest'
    }
  {% endif %}
  {% if module.name == "cocoapods" %}
    function setup() {
      echo "✨ Install project dependencies"
      mint install yonaskolb/XcodeGen@{{'{{'}}custom.xcodeGenVersion}}
      gem install cocoapods -v {{'{{'}}custom.cocoapodsVersion}}
      gem install cocoapods-binary -v {{'{{'}}custom.cocoapodsBinaryVersion}}
    ¶
      echo "✨ Setup project"
      (cd Libraries; create_projects)
      pod install
      xcodegen
      rm -rf All.xcworkspace

      # Create All scheme
      # mkdir -p All.xcworkspace/xcshareddata/xcschemes
      # cp All.xcodeproj/xcshareddata/xcschemes/All.xcscheme All.xcworkspace/xcshareddata/xcschemes/All.xcscheme
      # rm -rf All.xcodeproj
    }
    ¶
    function test() {
      xcodebuild test -project All.xcodeproj -scheme All -destination 'platform=iOS Simulator,name=iPhone 8,OS=latest'
    }
  {% endif %}
    ¶
    function help() {
      echo -n "The available tasks are: "
      # Approach inspired by https://stackoverflow.com/a/2641911
      grep "^function" {{'{{'}}global.fileName}} | sed -e 's/function //g' | sed -e 's/() {//g' | xargs | sed -e 's/ /, /g'
    }

